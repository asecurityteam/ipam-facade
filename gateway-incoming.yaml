openapi: 3.0.0
x-runtime:
  httpserver:
    address: ":${PORTS_GATEWAY_INCOMING}"
  logger:
    level: "${SERVERFULL_RUNTIME_LOGGER_LEVEL}"
    output: "${SERVERFULL_RUNTIME_LOGGER_OUTPUT}"
  stats:
    output: "${SERVERFULL_RUNTIME_STATS_OUTPUT}"
    datadog:
      address: "${SERVERFULL_RUNTIME_STATS_DATADOG_ADDRESS}"
      flushinterval: "10s"
      tags: "${SERVERFULL_RUNTIME_STATS_DATADOG_TAGS}"
  signals:
    installed:
      - "OS"
    os:
      signals:
        - 2 # SIGINT
        - 15 # SIGTERM
  connstate:
    reportinterval: "5s"
    hijackedcounter: "http.server.connstate.hijacked"
    closedcounter: "http.server.connstate.closed"
    idlegauge: "http.server.connstate.idle.gauge"
    idlecounter: "http.server.connstate.idle"
    activegauge: "http.server.connstate.active.gauge"
    activecounter: "http.server.connstate.active"
    newgauge: "http.server.connstate.new.gauge"
    newcounter: "http.server.connstate.new"
x-transportd:
  backends:
    - app
  app:
    host: "http://app:8081"
    pool:
      ttl: "24h"
      count: 1
info:
  version: 1.0.0
  title: "ipam-facade"
  description: "A facade for the IPAM functionality in the Device42 CMDB"
  contact:
    name: Security Development
    email: secdev-external@atlassian.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /healthcheck:
    get:
      description: "Liveness check."
      responses:
        "200":
          description: "Success."
      x-transportd:
        backend: app
  /v1/physical/ip/{ipAddress}:
    get:
      summary: "Retrieve information about a non-cloud device by its current IP Address"
      parameters:
        - name: "ipAddress"
          in: "path"
          description: "The IP address of the asset"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Customer, Subnet, and optionally Device information associated with the given IP address"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhysicalAsset"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: "No record of an asset with the given IP address was found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-transportd:
        backend: app
        enabled:
          - "metrics"
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "fetchbyip"
          async: false
          request: '{"ipAddress": "#!.Request.URL.ipAddress!#"}'
          success: '{"status": 200, "bodyPassthrough": true}'
          error: >
            {
              "status":
              #! if eq .Response.Body.errorType "InvalidInput" !# 400,
              #! else !#
              #! if eq .Response.Body.errorType "AssetNotFound" !# 404,
              #! else !# 500,
              #! end !#
              #! end !#
              "bodyPassthrough": true
            }
  /sync:
    post:
      description: "Synchronize the IPAM data from Device42 with the IPAM Facade database"
      requestBody:
        description: Optional Job Metadata used when the data sync request was triggered as an asynchronous job.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobMetadata'
      responses:
        204:
          description: "Success."
        500:
          description: "IPAM data retrieved successfully, but storage of that data failed."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: "Could not process request due to an IPAM dependency failure."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-transportd:
        backend: app
        enabled:
          - "metrics"
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "sync"
          async: false
          request: '{}'
          success: '{"status": 204, "bodyPassthrough": true}'
          error: >
            {
              "status":
              #! if eq .Response.Body.errorType "IPAMDataFetcherFailure" !# 503,
              #! else !# 500,
              #! end !#
              "bodyPassthrough": true
            }
  /trigger-sync:
    post:
      description: "Trigger an asynchronous job to synchronize the IPAM data from Device42 with the IPAM Facade database"
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobMetadata"
        500:
          description: "Triggger failed. Sync operation will not be performed."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-transportd:
        backend: app
        enabled:
          - "metrics"
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "enqueue"
          async: false
          request: '{}'
          success: '{"status": 202, "bodyPassthrough": true}'
          error: '{"status": 500, "bodyPassthrough": true}'
components:
  schemas:
    PhysicalAsset:
      type: object
      properties:
        ipAddress:
          type: string
          description: IP Address of the asset.
        resourceOwner:
          type: string
          description: Email address of the user most directly responsible for the asset.
        businessUnit:
          type: string
          description: Team or department most directly responsible for the asset.
        tags:
          type: object
          required:
            - subnetID
            - network
          properties:
            network:
              type: string
              description: CIDR block with netmask for the subnet containing the IP address.
            location:
              type: string
              description: Physical location of the asset. (Datacenter, office, etc.)
            deviceID:
              type: string
              description: ID of the device associated with the IP address, if found, within the backing CMDB.
            subnetID:
              type: string
              description: ID of the subnet containing the IP address within the backing CMDB.
            customerID:
              type: string
              description: ID of the customer associated with the subnet containing the IP address.
    JobMetadata:
      type: object
      properties:
        jobID:
          type: string
          description: ID for the asychronous job. Can be checked for successful operation of the task later in the service logs.
    Error:
      type: object
      properties:
        status:
          type: string
          description: HTTP status message
        code:
          type: integer
          description: HTTP status code
        reason:
          type: string
          description: Detailed information about the error
