// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asecurityteam/ipam-facade/pkg/domain (interfaces: SQLDB)

// Package assetfetcher is a generated GoMock package.
package assetfetcher

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSQLDB is a mock of SQLDB interface
type MockSQLDB struct {
	ctrl     *gomock.Controller
	recorder *MockSQLDBMockRecorder
}

// MockSQLDBMockRecorder is the mock recorder for MockSQLDB
type MockSQLDBMockRecorder struct {
	mock *MockSQLDB
}

// NewMockSQLDB creates a new mock instance
func NewMockSQLDB(ctrl *gomock.Controller) *MockSQLDB {
	mock := &MockSQLDB{ctrl: ctrl}
	mock.recorder = &MockSQLDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSQLDB) EXPECT() *MockSQLDBMockRecorder {
	return m.recorder
}

// Conn mocks base method
func (m *MockSQLDB) Conn() *sql.DB {
	ret := m.ctrl.Call(m, "Conn")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// Conn indicates an expected call of Conn
func (mr *MockSQLDBMockRecorder) Conn() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockSQLDB)(nil).Conn))
}

// Init mocks base method
func (m *MockSQLDB) Init(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) error {
	ret := m.ctrl.Call(m, "Init", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockSQLDBMockRecorder) Init(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockSQLDB)(nil).Init), arg0, arg1, arg2, arg3, arg4, arg5)
}

// RunScript mocks base method
func (m *MockSQLDB) RunScript(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "RunScript", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunScript indicates an expected call of RunScript
func (mr *MockSQLDBMockRecorder) RunScript(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunScript", reflect.TypeOf((*MockSQLDB)(nil).RunScript), arg0, arg1)
}

// Use mocks base method
func (m *MockSQLDB) Use(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "Use", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Use indicates an expected call of Use
func (mr *MockSQLDBMockRecorder) Use(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockSQLDB)(nil).Use), arg0, arg1)
}
