// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./pkg/domain/assetfetcher.go

package v1

import (
	context "context"

	"github.com/asecurityteam/ipam-facade/pkg/domain"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Fetcher interface
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *_MockFetcherRecorder
}

// Recorder for MockFetcher (not exported)
type _MockFetcherRecorder struct {
	mock *MockFetcher
}

func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &_MockFetcherRecorder{mock}
	return mock
}

func (_m *MockFetcher) EXPECT() *_MockFetcherRecorder {
	return _m.recorder
}

func (_m *MockFetcher) FetchPhysicalAsset(ctx context.Context, ipAddress string) (domain.PhysicalAsset, error) {
	ret := _m.ctrl.Call(_m, "FetchPhysicalAsset", ctx, ipAddress)
	ret0, _ := ret[0].(domain.PhysicalAsset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFetcherRecorder) FetchPhysicalAsset(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchPhysicalAsset", arg0, arg1)
}

func (_m *MockFetcher) FetchSubnets(ctx context.Context, limit int, offset int) ([]domain.AssetSubnet, error) {
	ret := _m.ctrl.Call(_m, "FetchSubnets", ctx, limit, offset)
	ret0, _ := ret[0].([]domain.AssetSubnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFetcherRecorder) FetchSubnets(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchSubnets", arg0, arg1, arg2)
}

func (_m *MockFetcher) FetchIPs(ctx context.Context, limit int, offset int) ([]domain.AssetIP, error) {
	ret := _m.ctrl.Call(_m, "FetchIPs", ctx, limit, offset)
	ret0, _ := ret[0].([]domain.AssetIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFetcherRecorder) FetchIPs(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchIPs", arg0, arg1, arg2)
}
