// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asecurityteam/ipam-facade/pkg/device42 (interfaces: SubnetFetcher)

// Package device42 is a generated GoMock package.
package device42

import (
	context "context"
	domain "github.com/asecurityteam/ipam-facade/pkg/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSubnetFetcher is a mock of SubnetFetcher interface
type MockSubnetFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockSubnetFetcherMockRecorder
}

// MockSubnetFetcherMockRecorder is the mock recorder for MockSubnetFetcher
type MockSubnetFetcherMockRecorder struct {
	mock *MockSubnetFetcher
}

// NewMockSubnetFetcher creates a new mock instance
func NewMockSubnetFetcher(ctrl *gomock.Controller) *MockSubnetFetcher {
	mock := &MockSubnetFetcher{ctrl: ctrl}
	mock.recorder = &MockSubnetFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubnetFetcher) EXPECT() *MockSubnetFetcherMockRecorder {
	return m.recorder
}

// FetchSubnets mocks base method
func (m *MockSubnetFetcher) FetchSubnets(arg0 context.Context) ([]domain.Subnet, error) {
	ret := m.ctrl.Call(m, "FetchSubnets", arg0)
	ret0, _ := ret[0].([]domain.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSubnets indicates an expected call of FetchSubnets
func (mr *MockSubnetFetcherMockRecorder) FetchSubnets(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSubnets", reflect.TypeOf((*MockSubnetFetcher)(nil).FetchSubnets), arg0)
}
