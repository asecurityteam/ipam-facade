// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asecurityteam/ipam-facade/pkg/ipamfetcher (interfaces: PageFetcher)

// Package ipamfetcher is a generated GoMock package.
package ipamfetcher

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPageFetcher is a mock of PageFetcher interface
type MockPageFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockPageFetcherMockRecorder
}

// MockPageFetcherMockRecorder is the mock recorder for MockPageFetcher
type MockPageFetcherMockRecorder struct {
	mock *MockPageFetcher
}

// NewMockPageFetcher creates a new mock instance
func NewMockPageFetcher(ctrl *gomock.Controller) *MockPageFetcher {
	mock := &MockPageFetcher{ctrl: ctrl}
	mock.recorder = &MockPageFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPageFetcher) EXPECT() *MockPageFetcherMockRecorder {
	return m.recorder
}

// FetchPage mocks base method
func (m *MockPageFetcher) FetchPage(arg0 context.Context, arg1, arg2 int) (PagedResponse, error) {
	ret := m.ctrl.Call(m, "FetchPage", arg0, arg1, arg2)
	ret0, _ := ret[0].(PagedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPage indicates an expected call of FetchPage
func (mr *MockPageFetcherMockRecorder) FetchPage(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPage", reflect.TypeOf((*MockPageFetcher)(nil).FetchPage), arg0, arg1, arg2)
}
